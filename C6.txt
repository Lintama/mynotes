第六章 C控制语句：循环

伪代码：用简单的句子表示程序的思路


while( scanf("%d",&num)==1 ){
   //循环行为
}


有时可使用带空语句的while语句  因为所有的任务都在测试条件中完成了
while(scanf("%d",&num)==1)
;
分号单独一行 便于提醒空语句是有意为之


非0视为真 0视为假
while(goats != 0) 可被 while(goats) 替换

num = 5 赋值
5 = num 语法错误
因此在判断条件中进行比较时 最好把常量写在左边 防止出错


_Bool类型
_Bool b; 只存储1和0 非0值被设置为1
input_is_good == (scanf() == 1) 括号提高可读性
while(input_is_good)            提高可读性

for 循环(计数器初始化 测试条件 更新:循环结束后执行 组合在一起)
int i;
for(i=0;i<5;printf("%d\n",i),i++);
0
1
2
3
4
for(printf();;)可用逗号隔开
for(n;n<5;)可空缺 但要求能结束循环

其他赋值运算符:
+= -= *= /= %=
注意 x *= 3*y+12 相当于 x = 3*(3*y+12)


逗号运算符
被分隔的表达式从左往右运算（有顺序！） 整个逗号表达式的值是右侧项的值
price = 123,456;     price = (123,456);
逗号也可以作为分隔符

do while至少执行一次


数组
存储一系列类型相同的值的序列
int a[10]; 10个存储单元 a[0]到a[9]
结尾带\0才是字符串 否则只是字符数组
编译器不会查明数组下标是否有效




模块化：把程序划分为一血独立的单元，每个单元执行一个任务 有利于提高可读性 让程序的/不同部分彼此独立/ 方便修改程序


编译器在程序中首次碰到函数时 需要知道函数的返回类型 若编译器尚未执行到函数的定义 并不知道函数的返回类型 因此需要通过
前置声明 预先说明函数的返回类型。
前置声明告诉编译器 函数定义在别处 其返回类型为XXX 若把函数的定义放在main()函数之前 就可以省略前置声明
因为编译器在执行到main()之前就已经知道该函数的所有信息 
但是标准的C风格是把main()放在所有函数之前 
另外 有些函数如printf scanf 其实在#include的时候就已经声明了



循环的三个重要概念 ：初始化 测试条件 更新
