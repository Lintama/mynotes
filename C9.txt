第九章  函数

函数是完成特定任务的独立程序代码单元
函数作用：抽象（模块化 提高可读性 ） 减少重复 方便后期修改


函数原型 函数调用 函数定义

void starbar(void);
告诉了编译器将使用一个名为starbar 没有返回值 无参数的函数 到别处查找该函数的定义
返回值类型和接受的参数类型  称作函数的签名

注意 根据新的C标准 函数必须进行函数声明 除非函数定义在main()之前  即使不进行声明也不会报错 而是warning


形参
void starbar(int x,y,z) 错误
void starbar(int x,int y,int z)正确 且这里的变量名与函数定义中的变量名可以无关
声明时 可以省略变量名 如
void starbar(int,char);


注意 形式参数是被调函数中的变量  实际参数是主调函数赋给被调函数的具体值
实际参数是具体的值 赋（复制）给形式参数


驱动程序：用于测试函数的程序有时被称作驱动程序 driver


return 返回的是变量和表达式的值
return (n<m)?n:m
函数返回值类型与函数声明的类型不一致：
实际得到的返回值相当于把函数中的返回值赋给与函数类型相同的变量所得到的值
return的另一个作用是终止函数 


函数类型指的是返回值的类型 不是函数参数的类型
在调用函数之前 要么先声明 要么先定义(mlgj 还是VC++好用 Dev竟然不报错)


参数传递时升级 见前面的类型转换

函数原型的好处：让编译器捕获在使用函数时可能出现的错误 
不过直接在main()之前定义函数也很普遍 因此也可以省略函数原型



递归
尾递归  n! = n*(n-1)!
        rfact(n) = n*rfact(n-1)!
使用递归更占内存和时间
不方便阅读和维护

理解递归得花很多工夫啊~



编译多源代码文件的程序：






指针：一个值未内存地址的变量   指针变量的值时地址
&运算符 取址
ptr = &pooh 把pooh的地址赋给ptr
对于这条语句 我们说 ptr指向pooh
ptr为指针变量  &pooh为常量  
ptr是可修改的左值 &pooh是右值



间接运算符 * 取值
p = &b;
*可以找出存储在b中的值  
p = &b;
v = *p;合在一起 相当于
v = b;

声明指针














