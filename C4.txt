第四章 字符串和格式化输入/输出

字符串：一个或多个字符的序列 用双引号表示 字符用单引号表示

没有专门用来储存字符串的变量类型 所以字符串被储存在char类型的数组里

 H e l l o _ W o r l d ! \0
数组：由连续的内存单元组成 末尾'\0'为空字符 标记字符串的结束 占一个字节

数组更正式的说法：相同类型的数据元素的有序序列

char name[5]

在scanf中输入字符串 遇到第一个空白符(空格，制表符或换行符)就不再读取输入
"Angela Plains" 只读取到Angela

#inclde <string.h>

strlen()函数：返回字符串中字符数(不包含'\0')
sizeof：后面为变量类型 需要加括号 如sizeof(int)
        后面为特定量 不需要加括号 如sizeof 6.2(返回8 float类型占8字节)

符号常量：如用PI来代替3.14159
符号常量的好处：比数字包含更多信息 便于理解与阅读 而且需要改动的时候 不用逐一修改 只需要修改一次
创建符号常量的第一种方式：声明 float pi;  pi =3.14159  只提供了一个符号名 而pi是一个可修改的变量
所以有更好的方案：C预处理器 #define PI 3.14159 编译程序时 所有PI会被替换成3.14159
通过#define 定义的符号常量也可以称作明示常量 常量名按照传统应用大写 方便知道这是一个符号常量 而非变量
每个头文件都有一系列可供使用的明示常量 如limits.h中 INT_MAX INT_MIN int类型的最大最小值可直接使用

const限定符：const int MONTHS = 12；限定变量为只读 比#define更灵活


printf()函数 

1.%d %c 被称为转换说明 指定了如何把数据转换成可显示的形式
  printf(格式字符串,待打印项列表) 格式字符串:字面字符+转换说明 转换说明要和后面的项匹配 项少 会输出无意义的数据 项多 多余的项不会打印
  转换说明修饰符  
  转换说明的意义：实际上是翻译说明 把相同的值(计算机内部存储为二进制)翻译成不同类型的文本
  如%d:把给定的值(01001100)翻译成十进制整数文本并打印出来(76)
  若%c:把给定的值(01001100)翻译成字符文本并打印出来(L)
  转换不匹配：原理同上
  如 用%c打印336(0000 0001 0101 0000) 因为字符占一个字节 所以读取后一字节(0101 0000)打印出的结果为P  “截断”
  如 %e 打印long(4字节) 会读取8字节(4字节+相邻的4字节)(float 8字节)然后解释成浮点数 所以浮点数不匹配结果会很怪

2.printf()函数的返回值：字符串中字符个数 不包含\0
3.打印较长字符串(三种方法)
  分两句printf
  用\来断行
  printf("print a"
         "long string\n");

scanf()
printf()把整数、浮点数、字符等转换成显示在屏幕上的文本
scanf()把输入的字符串转换成整数、浮点数、字符或者字符串.....
都用到格式字符串和参数列表 
主要区别在于 
printf()的参数列表中使用变量，常量，表达式
scanf()的参数列表使用变量的指针(这就是为什么scanf("%s",name)  name前不需要加&)









